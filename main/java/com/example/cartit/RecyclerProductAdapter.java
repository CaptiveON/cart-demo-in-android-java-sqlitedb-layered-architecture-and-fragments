package com.example.cartit;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.ColorInt;
import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;
import java.util.ArrayList;
import java.util.Locale;

public class RecyclerProductAdapter extends RecyclerView.Adapter<RecyclerProductAdapter.ViewHolder> implements Filterable
{
    Context context;
    ArrayList<Product> product; //To be binded with RecyclerView (Filtered based on search query)
    ArrayList<Product> fProduct; //Complete product list
    RecyclerProductInterface recyclerProductInterface; //Interface for Views to be Clickable

    //Adapter constructor
    RecyclerProductAdapter( ArrayList<Product> product, RecyclerProductInterface recyclerProductInterface){
        this.product = product;
        this.fProduct = new ArrayList<>(product);
        this.recyclerProductInterface = recyclerProductInterface;
    }

    //BuiltIn method to inflate RecyclerView View's layout
    @NonNull
    @Override
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.sale_items,parent,false);
        //As ViewHolder inner class is static, so passing interface by parameter
        return new ViewHolder(view,recyclerProductInterface);
    }

    @Override
    public void onBindViewHolder(@NonNull ViewHolder holder, int position) {
        holder.productImage.setImageResource(product.get(position).productImage);//product item's Image
        holder.productName.setText(product.get(position).productName);//product item's Name
        holder.productPrice.setText(String.valueOf(product.get(position).productPrice));//product item's Price
    }

    @Override
    public int getItemCount() {
        return product.size();
    }

    @Override
    public Filter getFilter() {
        return searchFilter;
    }

    //Filter instance holding Logic for filtering a searched item from the fProduct list
    //on separate thread then UI
    private Filter searchFilter = new Filter() {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            ArrayList<Product> filterProduct = new ArrayList<>();
            if (constraint != null || constraint.length() > 0)
            {
                String query = constraint.toString().toLowerCase().trim();
                for(int i =0; i< fProduct.size();i++)
                {
                    if(fProduct.get(i).getProductName().toLowerCase().contains(query))
                    {
                        filterProduct.add(fProduct.get(i));
                    }
                }
            }
            else
            {
                filterProduct.addAll(fProduct);
            }
            FilterResults results = new FilterResults();
            results.values = filterProduct;
            //Passing filtered list to publishResults method
            return results;
        }

        //publishResults method
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            product.clear();
            product.addAll((ArrayList<Product>) results.values);
            notifyDataSetChanged();
        }
    };

    //ViewHolder inner class initializing Views with relative layout widgets by ID implementing
    //OnClickListener
    public static class ViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener{
        ImageView productImage;
        TextView productName;
        TextView productPrice;
        RecyclerProductInterface recyclerProductInterface;
        public ViewHolder(@NonNull View itemView, RecyclerProductInterface recyclerProductInterface){
            super(itemView);
            productImage = itemView.findViewById(R.id.productImage);
            productName = itemView.findViewById(R.id.productName);
            productPrice = itemView.findViewById(R.id.productPrice);
            this.recyclerProductInterface = recyclerProductInterface;
            itemView.setOnClickListener(this); //Binding OnClickListener with the whole View
        }
        //OnClick awaking function through interface
        @Override
        public void onClick(View v) {
        recyclerProductInterface.onProductClickFA(getAdapterPosition());
        }
    }

    //Interface (having declaration of onProductClick method) to implement OnClick on Views generated by RecyclerView
    //onProductClick function implemented in MainActivity
    public interface RecyclerProductInterface {
        void onProductClickFA(int position);
    }
}
